name: build_and_test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build redTime
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Build CAMB
      working-directory: camb_mod
      run: make
      
    - name: Archive binaries
      run: tar -cvf binaries.tar camb_mod/camb  build/redTime build/convertPt
      
    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: binaries.tar
          
  test:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v3
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
      - name: unpack binaries
        run: tar -xvf binaries.tar
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: cache virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
        
      - name: run emulator comparison tests
        working-directory: tests/emulator_comparison
        run: ./runModels_ce
        
      - name: validate test runs
        working-directory: tests/emulator_comparison
        run: |
          source ../../.venv/bin/activate
          pytest
